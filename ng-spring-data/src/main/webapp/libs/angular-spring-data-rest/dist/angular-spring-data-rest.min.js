/*!
 * angular-spring-data-rest 0.3.1
 * Copyright 2014 Guy Brûlé (@guy_labs)
 * https://github.com/guylabs/angular-spring-data-rest
 */
!function () {
    "use strict";
    function a(b) {
        return angular.forEach(arguments, function (c) {
            c !== b && angular.forEach(c, function (c, d) {
                b[d] && b[d].constructor && b[d].constructor === Object ? a(b[d], c) : b[d] = c
            })
        }), angular.copy(b)
    }

    function b(a, b, c) {
        var d = a[b];
        if (d) {
            var e = Object.keys(d)[0], f = {};
            f[c] = d[e], a = angular.extend(a, f), delete a[b]
        }
        return a
    }

    function c(a, b) {
        return b && (a = e(a)), a
    }

    function d(a, b, c) {
        if (void 0 == a || !a)throw new Error("The provided resource name '" + b + "' has no valid URL in the '" + c + "' property.");
        return a
    }

    function e(a) {
        return a.replace(/{.*}/g, "")
    }

    function f(a) {
        var b = {}, c = /{\?(.*)}/g, d = c.exec(a)[1].split(",");
        return angular.forEach(d, function (a) {
            b[a] = ""
        }), b
    }

    angular.module("spring-data-rest", ["ngResource"]), angular.module("spring-data-rest").provider("SpringDataRestAdapter", function () {
        var e = {
            linksKey: "_links",
            linksHrefKey: "href",
            linksSelfLinkName: "self",
            embeddedKey: "_embedded",
            embeddedNewKey: "_embeddedItems",
            resourcesKey: "_resources",
            resourcesFunction: void 0,
            fetchFunction: void 0,
            fetchAllKey: "_allLinks"
        };
        return {
            config: function (b) {
                if ("undefined" != typeof b) {
                    if (!angular.isObject(b))throw new Error("The given configuration '" + b + "' is not an object.");
                    if (void 0 != b.resourcesFunction && "function" != typeof b.resourcesFunction)throw new Error("The given resource function '" + b.resourcesFunction + "' is not of type function.");
                    if (void 0 != b.fetchFunction && "function" != typeof b.fetchFunction)throw new Error("The given fetch function '" + b.fetchFunction + "' is not of type function.");
                    e = a(e, b)
                }
                return e
            }, $get: ["$injector", function (a) {
                function g(b, c, d, f) {
                    return void 0 == e.resourcesFunction ? a.get("$resource")(b, c, d, f) : e.resourcesFunction(b, c, d, f)
                }

                function h(b, c, d, f, g) {
                    void 0 == e.fetchFunction ? a.get("$http").get(b).success(function (a) {
                        d[c] = g ? i(a, f, !0) : a
                    }).error(function (a, c) {
                        throw new Error("There was an error (" + c + ") retrieving the data from '" + b + "'")
                    }) : e.fetchFunction(b, c, d, f, g)
                }

                var i = function k(a, i, j) {
                    function l(a, b) {
                        var f = d(a[e.linksKey][b][e.linksHrefKey], b, e.linksHrefKey);
                        return c(f, a[e.linksKey][b].templated)
                    }

                    var m = function (b, c, d, h) {
                        var i = this[e.linksKey], j = c;
                        if (angular.isObject(b)) {
                            if (!b.name)throw new Error("The provided resource object must contain a name property.");
                            var k = b.parameters;
                            return c && angular.isObject(c) ? j = k && angular.isObject(k) ? angular.extend(angular.copy(c), angular.copy(k)) : angular.copy(c) : k && angular.isObject(k) && (j = angular.copy(k)), angular.forEach(j, function (a, b) {
                                "" === a && delete j[b]
                            }), g(l(a, b.name), j, d, h)
                        }
                        if (b in i)return g(l(a, b), j, d, h);
                        var m = [];
                        return angular.forEach(i, function (a, b) {
                            if (a.templated) {
                                var c = f(a[e.linksHrefKey]);
                                m.push({name: b, parameters: c})
                            } else m.push({name: b})
                        }), m
                    };
                    if (!angular.isObject(a) || a instanceof Array)throw new Error("Given data '" + a + "' is not of type object.");
                    if (void 0 != i && !(i instanceof Array || "string" == typeof i))throw new Error("Given fetch links '" + i + "' is not of type array or string.");
                    var n = void 0;
                    if (e.linksKey in a) {
                        var o = {};
                        o[e.resourcesKey] = m, n = angular.extend(angular.copy(a), o), void 0 != i && (n || (n = angular.copy(a)), angular.forEach(a[e.linksKey], function (b, c) {
                            c != e.linksSelfLinkName && (i == e.fetchAllKey || "string" == typeof i && c == i || i instanceof Array && i.indexOf(c) >= 0) && h(l(a, c), c, n, i, j)
                        }))
                    }
                    return e.embeddedKey in a && (n || (n = angular.copy(a)), n = b(n, e.embeddedKey, e.embeddedNewKey), angular.forEach(n[e.embeddedNewKey], function (a, b) {
                        n[e.embeddedNewKey][b] = k(a, i, j)
                    })), n ? n : a
                }, j = function (b, c, d) {
                    var e = a.get("$q").when(b), f = a.get("$q").defer();
                    return e.then(function (a) {
                        var b = i(a.data, c, d);
                        f.resolve(b)
                    }, function (b) {
                        return f.reject(b), a.get("$q").reject(b)
                    }), f.promise
                };
                return {process: i, processWithPromise: j}
            }]
        }
    }), angular.module("spring-data-rest").provider("SpringDataRestInterceptor", ["$httpProvider", "SpringDataRestAdapterProvider", function (a) {
        return {
            apply: function () {
                a.interceptors.push("SpringDataRestInterceptor")
            }, $get: ["SpringDataRestAdapter", "$q", function (a, b) {
                return {
                    response: function (c) {
                        return c && angular.isObject(c.data) && (c.data = a.process(c.data)), c || b.when(c)
                    }
                }
            }]
        }
    }])
}();